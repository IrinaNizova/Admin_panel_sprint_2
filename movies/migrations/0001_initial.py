# Generated by Django 3.1.1 on 2020-10-16 19:07

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Filmwork',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='название')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
                ('creation_date', models.DateField(blank=True, verbose_name='дата создания фильма')),
                ('certificate', models.TextField(blank=True, verbose_name='сертификат')),
                ('file_path', models.FileField(blank=True, upload_to='film_works/', verbose_name='файл')),
                ('rating', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='рейтинг')),
                ('type', models.CharField(choices=[('movie', 'фильм'), ('tv_show', 'шоу')], max_length=20, verbose_name='тип')),
            ],
            options={
                'verbose_name': 'кинопроизведение',
                'verbose_name_plural': 'кинопроизведения',
                'db_table': 'film_work',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='название')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
            ],
            options={
                'verbose_name': 'жанр',
                'verbose_name_plural': 'жанры',
                'db_table': 'genre',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('actor', 'актёр'), ('writer', 'сценарист'), ('director', 'режиссёр')], max_length=20, verbose_name='тип')),
            ],
            options={
                'db_table': 'person_film_work',
            },
        ),
        migrations.CreateModel(
            name='Persons',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=255, verbose_name='имя')),
                ('birth_date', models.DateField(blank=True, verbose_name='дата рождения')),
            ],
            options={
                'verbose_name': 'участник фильма',
                'verbose_name_plural': 'участники фильма',
                'db_table': 'person',
            },
        ),
        migrations.AddIndex(
            model_name='persons',
            index=models.Index(fields=['full_name'], name='person_full_na_058eac_idx'),
        ),
        migrations.AddField(
            model_name='membership',
            name='film_work',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.filmwork'),
        ),
        migrations.AddField(
            model_name='membership',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.persons'),
        ),
        migrations.AddIndex(
            model_name='genre',
            index=models.Index(fields=['name'], name='genre_name_bff4c4_idx'),
        ),
        migrations.AddField(
            model_name='filmwork',
            name='genre_types',
            field=models.ManyToManyField(db_table='genre_film_work', to='movies.Genre'),
        ),
        migrations.AddField(
            model_name='filmwork',
            name='members',
            field=models.ManyToManyField(through='movies.Membership', to='movies.Persons'),
        ),
        migrations.CreateModel(
            name='Actors',
            fields=[
            ],
            options={
                'verbose_name': 'актёр',
                'verbose_name_plural': 'актёры',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('movies.persons',),
        ),
        migrations.CreateModel(
            name='Directors',
            fields=[
            ],
            options={
                'verbose_name': 'режиссёр',
                'verbose_name_plural': 'режиссёры',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('movies.persons',),
        ),
        migrations.CreateModel(
            name='Writers',
            fields=[
            ],
            options={
                'verbose_name': 'сценарист',
                'verbose_name_plural': 'сценаристы',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('movies.persons',),
        ),
        migrations.AddConstraint(
            model_name='membership',
            constraint=models.UniqueConstraint(fields=('film_work', 'person', 'role'), name='film_person_role'),
        ),
        migrations.AddIndex(
            model_name='filmwork',
            index=models.Index(fields=['title'], name='film_work_title_3625e7_idx'),
        ),
    ]
